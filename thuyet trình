Bài Thuyết Trình: Unit Test trong Kotlin

1. Giới Thiệu Về Unit Test

Unit Test là gì?

Unit Test là quá trình kiểm thử từng đơn vị nhỏ nhất trong mã nguồn (hàm, lớp, module) để đảm bảo tính đúng đắn của nó.

Trong Kotlin, Unit Test thường được viết bằng JUnit 5 và KotlinTest.

Tại sao cần Unit Test?

Phát hiện lỗi sớm trong quá trình phát triển.

Giúp code dễ hiểu và dễ bảo trì hơn.

Tăng tính đảm bảo chất lượng phần mềm.

2. Cách Viết Unit Test Trong Kotlin

Cấu trúc thư mục

src/main/kotlin - Chứa code chính.

src/test/kotlin - Chứa code test.

Cài đặt JUnit 5 và Mockito (Gradle)

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.2")
    testImplementation("org.mockito:mockito-core:4.3.1")
    testImplementation("org.mockito.kotlin:mockito-kotlin:4.0.0")
}

Viết Unit Test Cơ Bản

Giả sử ta có class Calculator:

Mockito

Mockito giúp bạn tạo và xác định hành vi của các đối tượng giả, mô phỏng các phụ thuộc và tương tác. Điều này giúp dễ dàng cô lập và kiểm tra các đơn vị mã riêng lẻ. Mockito cũng có khả năng khẳng định mạnh mẽ để kiểm tra các lệnh gọi phương thức và giá trị tham số.
JUnit5

Unit5 là phiên bản mới nhất của khung kiểm thử JUnit và đã giới thiệu những cải tiến đáng kể so với các phiên bản trước. Nó cung cấp một kiến ​​trúc mô-đun, cho phép bạn chỉ sử dụng các thành phần có liên quan đến nhu cầu kiểm thử của mình. Với thư viện khẳng định mạnh mẽ và hỗ trợ cho các bài kiểm thử tham số, JUnit5 cung cấp một nền tảng vững chắc để viết toàn diện và hiệu quả.

Khung thử nghiệm ưa thích của chúng tôi là Mockito, vì vậy đây sẽ là cơ sở cho bài viết này vì nó dễ triển khai và sử dụng trong Kotlin với Android Studio.

Hãy kiểm tra cách thêm Mockitothư viện vào Gradletệp dưới thẻ phụ thuộc.

Sau đây là một số phương pháp phổ biến nhất trong khuôn khổ Mockito:

mock() – tạo một đối tượng giả dựa trên lớp hoặc giao diện mà bạn truyền vào làm đối số.

val mockCallService = mock<CallService>()
or
val mockCallService : CallService = mock()
whenever() – thiết lập hành vi của một đối tượng giả. Nó được sử dụng để chỉ định giá trị trả về của một hàm hoặc để ném ngoại lệ khi một hàm được gọi.

thenReturn() – hàm này được sử dụng để chỉ định giá trị trả về của một hàm trong một đối tượng giả.

whenever(mockCallService.isContactAvailable())
.thenReturn(true)
any() – hàm này được sử dụng như một trình giữ chỗ cho bất kỳ giá trị nào của một kiểu nhất định, nó thay thế giá trị cụ thể của đối số hàm.

whenever(mockCallService.addContact(any()))
.thenReturn(Contact(1L, “john.doe@mail.com”, “315 194 6020”))
verify() – hàm này được sử dụng để kiểm tra xem một hàm có được gọi trên một đối tượng giả với các đối số chính xác hay không.

mockCallService.callNumber(“315 194 6020”)
verify(mockCallService).callNumber(“315 194 6020”)
doAnswer() – hàm này được sử dụng để xác định hành vi tùy chỉnh cho đối tượng giả, nó có thể được sử dụng để thực thi mã tùy chỉnh khi một hàm được gọi trên đối tượng giả.

doAnswer { invocation ->
   val phoneNumber = (invocation.arguments[0] as? String)!!
   phoneNumber.removePrefix(SOME_PREFIX)
}.whenever(mockCallService).stripPrefixFromPhoneNumber(any())
