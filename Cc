<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:padding="16dp">

    <Button
        android:id="@+id/pickImageButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Chọn ảnh" />

    <ImageView
        android:id="@+id/imageView"
        android:layout_width="200dp"
        android:layout_height="200dp"
        android:layout_marginTop="16dp"
        android:scaleType="centerCrop"
        android:contentDescription="Ảnh được chọn" />
</LinearLayout>

private lateinit var imageView: ImageView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val pickImageButton: Button = findViewById(R.id.pickImageButton)
        imageView = findViewById(R.id.imageView)

        // Activity result launcher to handle image picking
        val pickImageLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
            if (result.resultCode == Activity.RESULT_OK) {
                val selectedImageUri: Uri? = result.data?.data
                selectedImageUri?.let {
                    imageView.setImageURI(it)
                }
            }
        }

        // Set button click listener to open gallery
        pickImageButton.setOnClickListener {
            val intent = Intent(Intent.ACTION_PICK).apply {
                type = "image/*"
            }
            pickImageLauncher.launch(intent)
        }
    }
}


val pickImageLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
            if (result.resultCode == Activity.RESULT_OK) {
                val selectedImageUri: Uri? = result.data?.data
                selectedImageUri?.let {
                    imageView.setImageURI(it)

                    // Get the real path and title of the image
                    val realPath = getRealPathFromURI(it)
                    val title = getFileNameFromURI(it)

                    // Add image details to the path list
                    val pathItem = PathItem(
                        id = it.lastPathSegment ?: "unknown_id",
                        mUrl = realPath ?: "unknown_path",
                        mTitle = title ?: "unknown_title",
                        mimeType = contentResolver.getType(it) ?: "unknown"
                    )
                    pathList.add(pathItem)
                }
            }
        }

        // Set button click listener to open gallery
        pickImageButton.setOnClickListener {
            val intent = Intent(Intent.ACTION_PICK).apply {
                type = "image/*"
            }
            pickImageLauncher.launch(intent)
        }
    }

    // Helper function to get real file path from URI
    private fun getRealPathFromURI(uri: Uri): String? {
        var path: String? = null
        val projection = arrayOf(MediaStore.Images.Media.DATA)
        val cursor: Cursor? = contentResolver.query(uri, projection, null, null, null)
        cursor?.use {
            if (it.moveToFirst()) {
                val columnIndex = it.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
                path = it.getString(columnIndex)
            }
        }
        return path
    }

    // Helper function to get file name from URI
    private fun getFileNameFromURI(uri: Uri): String? {
        var name: String? = null
        val projection = arrayOf(MediaStore.Images.Media.DISPLAY_NAME)
        val cursor: Cursor? = contentResolver.query(uri, projection, null, null, null)
        cursor?.use {
            if (it.moveToFirst()) {
                val columnIndex = it.getColumnIndexOrThrow(MediaStore.Images.Media.DISPLAY_NAME)
                name = it.getString(columnIndex)
            }
        }
        return name
    }



1. AI Trợ Lý Ảo với ChatGPT hoặc LLMs
Bạn có thể tích hợp một mô hình AI như GPT-4 hoặc Gemini để giúp trợ lý ảo có thể trả lời câu hỏi tự nhiên.
Dùng API của OpenAI hoặc một mô hình LLM chạy cục bộ để tránh độ trễ khi giao tiếp.
2. Tích Hợp với Nhà Thông Minh (Smart Home)
Sử dụng các nền tảng như Home Assistant, Google Home, hoặc Apple HomeKit để kết nối và điều khiển thiết bị trong nhà.
Dùng giao thức Matter hoặc MQTT để kết nối với nhiều thiết bị khác nhau.
3. Nhân Vật Ảo 3D Di Chuyển trong Không Gian
Sử dụng Unity hoặc Unreal Engine để tạo nhân vật 3D xuất hiện trong thế giới thực tế ảo.
Công nghệ AI NPC (Non-Player Character) của NVIDIA ACE hoặc Inworld AI có thể giúp nhân vật này có phản ứng tự nhiên hơn.
Dùng Inverse Kinematics (IK) và Animation AI để nhân vật có thể di chuyển linh hoạt.
4. Tích Hợp trên Meta Quest
Meta Quest 3 hỗ trợ WebXR, OpenXR, nên có thể phát triển ứng dụng thực tế ảo bằng Unity hoặc WebXR.
Nếu muốn chạy offline, bạn cần biên dịch mô hình AI xuống thiết bị (ví dụ: chạy mô hình Llama 3 trên nền tảng Android của Quest).
5. Điều Khiển bằng Giọng Nói và Cử Chỉ
Sử dụng Meta Voice SDK hoặc OpenAI Whisper để nhận diện giọng nói.
Kết hợp với công nghệ Hand Tracking và Eye Tracking trên Quest để giúp người dùng tương tác với trợ lý dễ hơn.
