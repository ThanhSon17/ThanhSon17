import android.content.Context
import android.graphics.Canvas
import androidx.recyclerview.widget.RecyclerView
import android.view.View

// Giả sử ViewHolderValue và các R.dimen của bạn được định nghĩa ở nơi khác
// Ví dụ: object ViewHolderValue { const val VIEW_HOLDER_TYPE_DATA = 0 /* Hoặc giá trị thực tế */ }

class PicturesAdapterTransitionItemDecoration(
    private val context: Context,
    private var isShowTop: Boolean, // Trạng thái ban đầu của mIsShowTop
    private val adapter: PicturesAdapter<*> // Tham chiếu đến adapter để kiểm tra viewType
) : RecyclerView.ItemDecoration() {

    private val translationType0: Float // Cho pos % 3 == 0
    private val translationType1: Float // Cho pos % 3 == 1
    private val translationType2: Float // Cho pos % 3 == 2

    init {
        // Lấy giá trị pixel từ resources
        val picturesRecyclerViewEndPadding = context.resources.getDimensionPixelSize(R.dimen.pictures_recycler_view_end_padding).toFloat()
        val pictureItemThumbnailBorder = context.resources.getDimensionPixelSize(R.dimen.pictures_item_thumbnail_border).toFloat() // Giả sử đây là R.dimen đúng
        val topTabIconMarginLeftRight = context.resources.getDimensionPixelSize(R.dimen.top_tab_icon_margin_left_right).toFloat()

        // Tính toán các giá trị dịch chuyển dựa trên logic gốc của bạn
        // pos % 3 == 0
        translationType0 = picturesRecyclerViewEndPadding + pictureItemThumbnailBorder

        // pos % 3 == 1 (Logic gốc của bạn là: R.dimen.top_tab_icon_margin_left_right - R.dimen.pictures_item_thumbnail_border)
        translationType1 = topTabIconMarginLeftRight - pictureItemThumbnailBorder

        // pos % 3 == 2 (Logic gốc của bạn là: -(R.dimen.top_tab_icon_margin_left_right + R.dimen.pictures_item_thumbnail_border * 2))
        translationType2 = -(topTabIconMarginLeftRight + pictureItemThumbnailBorder * 2)
    }

    // Hàm này được gọi từ Activity/Fragment khi trạng thái isShowTop thay đổi
    fun updateIsShowTop(newIsShowTop: Boolean) {
        if (this.isShowTop != newIsShowTop) {
            this.isShowTop = newIsShowTop
            // Yêu cầu RecyclerView vẽ lại các item decoration
            // (Việc gọi invalidateItemDecorations() sẽ được thực hiện từ Activity/Fragment)
        }
    }

    private fun getRealPosition(viewPosition: Int): Int {
        // Kiểm tra xem vị trí có hợp lệ không trước khi trừ
        if (viewPosition < 0) return viewPosition
        return if (isShowTop && viewPosition > 0) viewPosition - 1 else viewPosition
    }

    override fun onDraw(c: Canvas, parent: RecyclerView, state: RecyclerView.State) {
        super.onDraw(c, parent, state)

        for (i in 0 until parent.childCount) {
            val childView: View = parent.getChildAt(i)
            val adapterPosition: Int = parent.getChildAdapterPosition(childView)

            if (adapterPosition == RecyclerView.NO_POSITION) {
                continue
            }

            // Chỉ áp dụng dịch chuyển cho các mục dữ liệu hình ảnh
            // Sử dụng adapter được truyền vào để lấy viewType
            val viewType = adapter.getItemViewType(adapterPosition)
            if (viewType == ViewHolderValue.VIEW_HOLDER_TYPE_DATA) { // Sử dụng hằng số viewType của bạn
                val realPos = getRealPosition(adapterPosition)

                if (realPos < 0) { // Nếu realPos không hợp lệ (ví dụ: header khi isShowTop=true và adapterPosition=0)
                    childView.translationX = 0f
                    continue
                }

                when (realPos % 3) {
                    0 -> childView.translationX = translationType0
                    1 -> childView.translationX = translationType1
                    2 -> childView.translationX = translationType2
                    else -> childView.translationX = 0f // Luôn đặt lại cho các trường hợp khác
                }
            } else {
                // Đặt lại translationX cho các loại view khác để tránh lỗi khi tái sử dụng
                childView.translationX = 0f
            }
        }
    }
}





import android.annotation.SuppressLint
import android.content.Context // Cần import nếu chưa có
import android.util.Log // Cần import nếu chưa có
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.recyclerview.widget.RecyclerView // Cần import nếu chưa có

// Giả sử các lớp và hằng số này đã được định nghĩa:
// interface IPicturesView { /* ... */ fun supportLayoutCache(): Boolean }
// class BaseListViewAdapter<V>(view: V, locationKey: String) : RecyclerView.Adapter<ListViewHolder>() { /* ... */
//    open var mIsShowTop: Boolean = false // Thêm khai báo này nếu nó chưa có trong BaseListViewAdapter
//    open fun getItemViewType(position: Int): Int { /* ... */ return ViewHolderValue.VIEW_HOLDER_TYPE_DATA } // Ví dụ
//    open fun resetSharedTransitionView(isDone: Boolean) {}
//    open fun sesLwIsResizeEnabled(position: Int): Boolean { return true }
// }
// open class ListViewHolder(itemView: View, val viewType: Int = ViewHolderValue.VIEW_HOLDER_TYPE_DATA) : RecyclerView.ViewHolder(itemView) {
//    companion object {
//        const val TYPE_BOTTOM_ADD = 1
//        const val TYPE_TOP_TAB = 2
//        const val TYPE_ALBUM_TITLE = 3
//    }
// }
// class ImageViewHolder(itemView: View, viewType: Int) : ListViewHolder(itemView, viewType) {
//    var mImageView: View? = null // Hoặc kiểu cụ thể hơn như ImageView
//    fun prepareSharedTransition(view: IPicturesView) {}
// }
// object ViewHolderValue { const val VIEW_HOLDER_TYPE_DATA = 0 /* Hoặc giá trị thực tế */ }
// object StaticFeatures {
//    var THUMBNAIL_CIRCLE_BITMAP = false
//    var SUPPORT_LAYOUT_CACHE = false
// }
// object LayoutCache { fun getCachedViewHolder(id: Int): View? = null }
// object AppResources { // Thay thế bằng cách truy cập resources thực tế của bạn
//    fun getDimenResToPx(id: Int): Int = 0 // Dummy implementation
// }
// object R { // Dummy R class
//    object layout {
//        const val recycler_item_pictures_round_image_layout = 1
//        const val recycler_item_pictures_image_layout = 2
//        const val recycler_item_bottom_add_layout = 3
//    }
//    object dimen { // Các giá trị này sẽ được sử dụng bởi ItemDecoration
//        const val pictures_recycler_view_end_padding = 1
//        const val picture_item_thumbnail_border = 2 // Có thể là pictures_item_thumbnail_border
//        const val pictures_item_thumbnail_border = 2 // Giả sử đây là đúng
//        const val top_tab_icon_margin_left_right = 3
//    }
//    object drawable {
//        const val picture_view_thumbnail_border = 1
//    }
// }


open class PicturesAdapter<V : IPicturesView>(
    val view: V, // mView được sử dụng, nên để là val và public hoặc internal
    locationKey: String
) : BaseListViewAdapter<V>(view, locationKey) {

    private val itemLayoutId =
        if (StaticFeatures.THUMBNAIL_CIRCLE_BITMAP) R.layout.recycler_item_pictures_round_image_layout else R.layout.recycler_item_pictures_image_layout
    // private val itemBottomAddLayoutId = R.layout.recycler_item_bottom_add_layout // Không thấy sử dụng, có thể bỏ
    override var mIsFirstLaunch: Boolean = false

    // Thêm context nếu BaseListViewAdapter không cung cấp
    // protected val context: Context = view.getContext() // Nếu IPicturesView có getContext()

    companion object { // Thêm TAG nếu chưa có
        private const val TAG = "PicturesAdapter"
    }

    @SuppressLint("ResourceType")
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ListViewHolder {
        var itemView: View? = null // Đổi tên biến để tránh trùng tên với thuộc tính của class
        return if (viewType != ListViewHolder.TYPE_BOTTOM_ADD && viewType != ListViewHolder.TYPE_TOP_TAB && viewType != ListViewHolder.TYPE_ALBUM_TITLE) {
            if (StaticFeatures.SUPPORT_LAYOUT_CACHE && this.view.supportLayoutCache()) { // Sử dụng this.view
                itemView = LayoutCache.getCachedViewHolder(itemLayoutId)
            }
            if (itemView == null) {
                itemView = LayoutInflater.from(parent.context).inflate(itemLayoutId, parent, false)
            }
            ImageViewHolder(itemView!!, ViewHolderValue.VIEW_HOLDER_TYPE_DATA) // itemView chắc chắn không null ở đây
        } else {
            super.onCreateViewHolder(parent, viewType)
        }
    }

    // SET - Shared Element Transition
    private var needSET = true
    private var positionSET = -1
    private var listViewReady = true

    override fun onBindViewHolder(viewHolder: ListViewHolder, viewPosition: Int) {
        super.onBindViewHolder(viewHolder, viewPosition)
        // KHÔNG CÒN GỌI transitionImage(viewHolder, viewPosition) ở đây nữa
        // ItemDecoration sẽ xử lý việc này

        if (viewHolder is ImageViewHolder) {
            if (needSET && positionSET == viewPosition && listViewReady) {
                needSET = false
                viewHolder.prepareSharedTransition(this.view) // Sử dụng this.view
            }
        }
    }

    fun prepareSharedTransition(position: Int) {
        Log.d(TAG, "Transition: set position transition = $position")
        positionSET = position
        needSET = true
    }

    fun checkPrePareViewHolder(position: Int) {
        if (needSET) {
            notifyItemChanged(position, false) // Payload có thể là bất kỳ object nào, không nhất thiết boolean
        }
    }

    fun onListViewReady(ready: Boolean) {
        Log.d(TAG, "onListViewReady#$ready")
        listViewReady = ready
    }

    override fun resetSharedTransitionView(isDone: Boolean) {
        super.resetSharedTransitionView(isDone)
        if (isDone) {
            // Giả sử mGalleryListView là RecyclerView của bạn và có thể truy cập được
            // val viewHolder = mGalleryListView?.findViewHolderForAdapterPosition(positionSET)
            // if (viewHolder is ImageViewHolder) {
            // viewHolder.mImageView?.foreground = context?.getDrawable(R.drawable.picture_view_thumbnail_border) // Cần context
            // }
        }
    }

    // XÓA PHƯƠNG THỨC transitionImage
    // private fun transitionImage(viewHolder: ListViewHolder, viewPosition: Int) { ... }

    // XÓA PHƯƠNG THỨC getRealPosition (logic này đã chuyển vào ItemDecoration)
    // open fun getRealPosition(viewPosition: Int): Int { ... }


    // Phương thức này cần được định nghĩa trong BaseListViewAdapter hoặc ở đây nếu chưa có
    // override var mIsShowTop: Boolean
    //    get() = super.mIsShowTop // Hoặc logic riêng
    //    set(value) { super.mIsShowTop = value }


    override fun sesLwIsResizeEnabled(position: Int): Boolean {
        if (getItemViewType(position) == ListViewHolder.TYPE_ALBUM_TITLE) {
            return false
        }
        return super.sesLwIsResizeEnabled(position)
    }

    // Cần đảm bảo mIsShowTop được cập nhật đúng cách trong adapter này
    // hoặc trong BaseListViewAdapter để ItemDecoration có thể lấy trạng thái chính xác.
    // Ví dụ, nếu BaseListViewAdapter có hàm setHeaderVisibility(boolean visible):
    // public void setHeaderVisibility(boolean visible) {
    //     boolean oldIsShowTop = mIsShowTop;
    //     mIsShowTop = visible;
    //     if (oldIsShowTop != mIsShowTop) {
    //         // Thông báo cho ItemDecoration cập nhật (thông qua Activity/Fragment)
    //     }
    // }
}
