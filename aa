private val messageListener = MessageClient.OnMessageReceivedListener { messageEvent ->
        if (messageEvent.path == "/test-path") {
            val message = String(messageEvent.data)
            Log.d("Watch", "Message received: $message")
        } else {
            Log.d("Watch", "Message received on unknown path: ${messageEvent.path}")
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_wear)
        Log.d("Watch", "Activity created")
    }

    override fun onResume() {
        super.onResume()
        Wearable.getMessageClient(this).addListener(messageListener)
        Log.d("Watch", "MessageClient listener added")
    }

    override fun onPause() {
        super.onPause()
        Wearable.getMessageClient(this).removeListener(messageListener)
        Log.d("Watch", "MessageClient listener removed")
    }
<androidx.wear.widget.BoxInsetLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:padding="8dp"
        app:layout_boxedEdges="all">

        <ImageView
            android:id="@+id/imageView"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:visibility="gone"
            android:scaleType="centerCrop"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent" />

        <ProgressBar
            android:id="@+id/progressBar"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:visibility="gone"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent" />

        <TextView
            android:id="@+id/errorText"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:visibility="gone"
            android:textAlignment="center"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent" />

    </androidx.constraintlayout.widget.ConstraintLayout>

</androidx.wear.widget.BoxInsetLayout>

view?.showTransferProgress() // Show loading state while checking
            try {
                // Get capabilities to ensure the device can receive images
                val capabilityInfo = Tasks.await(
                    Wearable.getCapabilityClient(context)
                        .getCapability("receive_images", CapabilityClient.FILTER_REACHABLE)
                )
                
                if (capabilityInfo.nodes.isNotEmpty()) {
                    // We found a wear device that can receive images
                    view?.showImageSelectionUI()
                } else {
                    // Double check connected nodes in case capability isn't registered
                    val nodes = Tasks.await(Wearable.getNodeClient(context).connectedNodes)
                    if (nodes.isNotEmpty()) {
                        view?.showImageSelectionUI()
                    } else {
                        view?.showNoConnectedDevicesError()
                    }
                }


binding = ActivityImageReceiverBinding.inflate(layoutInflater)
        setContentView(binding.root)
        
        capabilityClient = Wearable.getCapabilityClient(this)
        
        // Advertise that this device can receive images
        CoroutineScope(Dispatchers.IO).launch {
            try {
                Tasks.await(capabilityClient.addLocalCapability("receive_images"))
            } catch (e: Exception) {
                Log.e("ImageReceiver", "Failed to advertise capability", e)
            }
        }
        
        presenter = ImageReceiverPresenter(
            this,
            Wearable.getDataClient(this)
        )
        presenter.onAttach(this)
        presenter.startListeningForImages()
    }
    
    override fun onDestroy() {
        // Remove capability when activity is destroyed
        CoroutineScope(Dispatchers.IO).launch {
            try {
                Tasks.await(capabilityClient.removeLocalCapability("receive_images"))
            } catch (e: Exception) {
                Log.e("ImageReceiver", "Failed to remove capability", e)
            }
        }
        presenter.onDetach()
        super.onDestroy()
    }


override fun checkWearDeviceConnection() {
        // Initialize on main thread
        val nodeClient = Wearable.getNodeClient(context)
        
        scope.launch {
            view?.showTransferProgress()
            try {
                // Switch to IO dispatcher for the async operation
                val nodes = withContext(Dispatchers.IO) {
                    Tasks.await(nodeClient.connectedNodes)
                }
                
                // Back on main thread
                if (nodes.isNotEmpty()) {
                    Log.d("ImageTransfer", "Found connected nodes: ${nodes.map { it.displayName }}")
                    view?.showImageSelectionUI()
                } else {
                    Log.d("ImageTransfer", "No connected nodes found")
                    view?.showNoConnectedDevicesError()
                }
            } catch (e: Exception) {
                Log.e("ImageTransfer", "Connection check failed", e)
                view?.showTransferError("Failed to check Wear device connection: ${e.message}")
            }
        }
    }

try {
                // Read image data in IO context
                val imageData = withContext(Dispatchers.IO) {
                    context.contentResolver.openInputStream(uri)?.use { 
                        it.readBytes() 
                    } ?: throw IllegalStateException("Failed to read image data")
                }
                
                // Create request on main thread
                val request = PutDataMapRequest.create("/image_transfer").apply {
                    dataMap.putAsset("image", Asset.createFromBytes(imageData))
                    dataMap.putLong("timestamp", System.currentTimeMillis())
                }.asPutDataRequest()
                    .setUrgent()
                
                // Execute data transfer in IO context
                withContext(Dispatchers.IO) {
                    Tasks.await(dataClient.putDataItem(request))
                }
                
                // Update UI on main thread
                view?.showTransferSuccess()
                Log.d("ImageTransfer", "Image transfer successful")
                
            } catch (e: Exception) {
                Log.e("ImageTransfer", "Image transfer failed", e)
                view?.showTransferError("Failed to transfer image: ${e.message}")
            }
        }


// Wear OS - ImageReceiverPresenter.kt
class ImageReceiverPresenter(
    private val context: Context,
    private val dataClient: DataClient
) : ImageReceiverContract.Presenter {
    
    private var view: ImageReceiverContract.View? = null
    private val scope = CoroutineScope(Dispatchers.Main + Job())
    private var dataListener: DataClient.OnDataChangedListener? = null
    
    override fun onAttach(view: ImageReceiverContract.View) {
        this.view = view
        Log.d("WearImageReceiver", "Presenter attached to view")
    }
    
    override fun onDetach() {
        dataListener?.let { dataClient.removeListener(it) }
        scope.cancel()
        view = null
        Log.d("WearImageReceiver", "Presenter detached from view")
    }
    
    override fun startListeningForImages() {
        Log.d("WearImageReceiver", "Starting to listen for images")
        
        // First try to get any existing data
        scope.launch {
            try {
                val dataItems = Tasks.await(dataClient.getDataItems(
                    Uri.Builder()
                        .scheme(PutDataRequest.WEAR_URI_SCHEME)
                        .path("/image_transfer")
                        .build()
                ))
                
                dataItems.forEach { dataItem ->
                    Log.d("WearImageReceiver", "Found existing data item")
                    processImageDataItem(dataItem)
                }
            } catch (e: Exception) {
                Log.e("WearImageReceiver", "Error getting existing data items", e)
            }
        }
        
        // Then listen for new data
        dataListener = DataClient.OnDataChangedListener { dataEvents ->
            Log.d("WearImageReceiver", "Received data change event")
            for (event in dataEvents) {
                Log.d("WearImageReceiver", "Processing event: ${event.type} with path: ${event.dataItem.uri.path}")
                if (event.dataItem.uri.path == "/image_transfer") {
                    processImageDataItem(event.dataItem)
                }
            }
        }
        
        dataClient.addListener(dataListener!!)
            .addOnSuccessListener { 
                Log.d("WearImageReceiver", "Successfully added data listener") 
            }
            .addOnFailureListener { e ->
                Log.e("WearImageReceiver", "Failed to add data listener", e)
            }
    }
    
    private fun processImageDataItem(dataItem: DataItem) {
        Log.d("WearImageReceiver", "Processing image data item")
        scope.launch(Dispatchers.Main) {
            view?.showLoadingState()
            try {
                val dataMap = DataMapItem.fromDataItem(dataItem).dataMap
                val asset = dataMap.getAsset("image") 
                    ?: throw IllegalStateException("No image asset found")
                
                Log.d("WearImageReceiver", "Getting asset FD")
                
                // Get the asset on IO thread
                val imageData = withContext(Dispatchers.IO) {
                    Tasks.await(dataClient.getFdForAsset(asset))
                        ?.inputStream
                        ?.use { it.readBytes() }
                        ?: throw IllegalStateException("Failed to read image data")
                }
                
                Log.d("WearImageReceiver", "Decoding bitmap")
                
                // Decode bitmap on IO thread
                val bitmap = withContext(Dispatchers.IO) {
                    BitmapFactory.decodeByteArray(imageData, 0, imageData.size)
                }
                
                Log.d("WearImageReceiver", "Showing image")
                view?.showImage(bitmap)
                
            } catch (e: Exception) {
                Log.e("WearImageReceiver", "Failed to process image", e)
                view?.showError("Failed to process image: ${e.message}")
            }
        }
    }
}

// Wear OS - ImageReceiverActivity.kt
class ImageReceiverActivity : ComponentActivity(), ImageReceiverContract.View {
    
    private lateinit var presenter: ImageReceiverContract.Presenter
    private lateinit var binding: ActivityImageReceiverBinding
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        Log.d("WearImageReceiver", "Activity onCreate")
        
        binding = ActivityImageReceiverBinding.inflate(layoutInflater)
        setContentView(binding.root)
        
        presenter = ImageReceiverPresenter(
            this,
            Wearable.getDataClient(this)
        )
        
        presenter.onAttach(this)
        presenter.startListeningForImages()
    }
    
    override fun onDestroy() {
        presenter.onDetach()
        super.onDestroy()
    }
    
    override fun showLoadingState() {
        Log.d("WearImageReceiver", "Showing loading state")
        binding.progressBar.isVisible = true
        binding.imageView.isVisible = false
        binding.errorText.isVisible = false
    }
    
    override fun showImage(bitmap: Bitmap) {
        Log.d("WearImageReceiver", "Showing image")
        binding.progressBar.isVisible = false
        binding.imageView.isVisible = true
        binding.errorText.isVisible = false
        binding.imageView.setImageBitmap(bitmap)
    }
    
    override fun showError(message: String) {
        Log.d("WearImageReceiver", "Showing error: $message")
        binding.progressBar.isVisible = false
        binding.imageView.isVisible = false
        binding.errorText.isVisible = true
        binding.errorText.text = message
    }
}

Wearable.getCapabilityClient(context)
    .getCapability("wearos_capability", CapabilityClient.FILTER_REACHABLE)
    .addOnSuccessListener { capabilityInfo ->
        if (capabilityInfo.nodes.isNotEmpty()) {
            Log.d("WearImageReceiver", "Wear OS device connected")
        } else {
            Log.e("WearImageReceiver", "No connected Wear OS device")
        }
    }
    .addOnFailureListener { e ->
        Log.e("WearImageReceiver", "Failed to check capability", e)
    }

Wearable.getNodeClient(context)
    .connectedNodes
    .addOnSuccessListener { nodes ->
        if (nodes.isNotEmpty()) {
            Log.d("Phone", "Wear OS devices connected: ${nodes.map { it.displayName }}")
        } else {
            Log.e("Phone", "No Wear OS devices connected")
        }
    }
    .addOnFailureListener { e ->
        Log.e("Phone", "Failed to retrieve connected nodes", e)
    }


Wearable.getCapabilityClient(context)
    .addLocalCapability("image_transfer_capability")
    .addOnSuccessListener {
        Log.d("Wear", "Capability added successfully")
    }
    .addOnFailureListener { e ->
        Log.e("Wear", "Failed to add capability", e)
    }
Trên điện thoại (Tìm kiếm capability):
kotlin
Copy code
Wearable.getCapabilityClient(context)
    .getCapability("image_transfer_capability", CapabilityClient.FILTER_REACHABLE)
    .addOnSuccessListener { capabilityInfo ->
        if (capabilityInfo.nodes.isNotEmpty()) {
            Log.d("Phone", "Connected Wear OS devices: ${capabilityInfo.nodes.map { it.displayName }}")
        } else {
            Log.e("Phone", "No reachable Wear OS devices with this capability")
        }
    }
    .addOnFailureListener { e ->
        Log.e("Phone", "Failed to retrieve capability info", e)
    }
